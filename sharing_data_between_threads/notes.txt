Problems with sharing data between threads
    Race conditions
    Anything where the outcome depends on the relative ordering of excecution of operations on two or more threads.
    The threads race to perform their respective operations. 

    data races == race conditions (can be cause of udefined behavior)

Protecting data with mutexes

Alternate facilities for protecting shared data

    One way to deal with problematic race conditions, is to wrap the data structure
    with a protection mechanism, to ensure that only the thread actually performing 
    a modification can see the intermediate states where the invariants are broken.

    So the thread can see what modifications are being taken in place by another thread?



Preservering the invariants is known as "lock free programming" CH 7
Memory Model is covered in ch 5


Software Transactional Memory (STM)

This is essentially synchronization? So you lose time by waiting?

3.2 Protecting Shared Data With mutexes
Mutually Exclusive, if any thread was trying to access a data structure, 
and another tried to the same data structure, it would have to wait until 
the first thread was finished

You need to structure your code to protect 

